#!/usr/bin/env node
"use strict";
// Path: src/utils/scripts/templateSetupScript.ts
// Script to properly set up the template directory structure
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs/promises"));
const path = __importStar(require("path"));
const chalk_1 = __importDefault(require("chalk"));
// Paths
const projectRoot = path.resolve(__dirname, '../../..');
const templatesDir = path.join(projectRoot, 'templates');
// Required template categories and files
const requiredStructure = {
    'express': {
        'server': ['server.ejs'],
        'handler': ['handler.ejs'],
        'types': ['types.ejs'],
        'index': ['index.ejs'],
        'api': ['api.ejs'],
        'src': {
            'handlers': ['connectionHandler.ts.ejs', 'messageHandler.ts.ejs'],
            'utils': ['logger.ts.ejs', 'errorHandler.ts.ejs']
        }
    }
};
// Example template contents
const templateExamples = {
    'server.ejs': `// Generated by Axe Handle MCP Server Generator
// Date: <%= date %>
// Version: <%= version %>

import express from 'express';
import { json, urlencoded } from 'express';
import expressWs from 'express-ws';
import http from 'http';
import WebSocket from 'ws';
import { v4 as uuidv4 } from 'uuid';
import { logger } from './utils';

// Create Express application
const app = express();
const server = http.createServer(app);
const wsInstance = expressWs(app, server);

// Middleware
app.use(json());
app.use(urlencoded({ extended: true }));

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'ok' });
});

<% for (const resource of service.resources) { %>
// <%= resource.name %> endpoints
<% for (const operation of resource.operations) { %>
app.<%= operation.httpMethod.toLowerCase() %>('<%= operation.route %>', <%= resource.name.toLowerCase() %>Handler.<%= operation.name.toLowerCase() %><%= resource.name %>);
<% } %>

<% } %>

// WebSocket endpoint for MCP
app.ws('/mcp', (ws, req) => {
  const connectionId = uuidv4();
  logger.info(\`New MCP connection established: \${connectionId}\`);
  
  // Set up event handlers
  ws.on('message', (message) => {
    // Handle MCP messages
    try {
      const data = JSON.parse(message.toString());
      // TODO: Process the message
    } catch (error) {
      logger.error(\`Error processing message: \${error}\`);
    }
  });
  
  ws.on('close', () => {
    logger.info(\`MCP connection closed: \${connectionId}\`);
  });
  
  ws.on('error', (error) => {
    logger.error(\`MCP connection error: \${error}\`);
  });
});

export default app;`,
    'handler.ejs': `// Generated by Axe Handle MCP Server Generator
// Date: <%= date %>
// Version: <%= version %>

// Handler template for resources
import { Request, Response } from 'express';
// Rest of handler implementation...`,
    'types.ejs': `// Generated by Axe Handle MCP Server Generator
// Date: <%= date %>
// Version: <%= version %>

// Type definitions template
<% for (const type of service.types) { %>
export interface <%= type.name %> {
<% for (const field of type.fields) { %>
  <%= field.name %><%= field.required ? '' : '?' %>: <%= field.tsType %>;
<% } %>
}

<% } %>`,
    'index.ejs': `// Generated by Axe Handle MCP Server Generator
// Date: <%= date %>
// Version: <%= version %>

// Main entry point for the generated server
import app from './server';

const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
  console.log(\`<%= service.name %> MCP server running on port \${PORT}\`);
});`,
    'api.ejs': `# <%= service.name %> API Documentation

> Generated by Axe Handle MCP Server Generator - <%= date %>

## Overview

This document describes the API for the <%= service.name %> service, which implements the Model Context Protocol (MCP).

## Resources

<% for (const resource of service.resources) { %>
### <%= resource.name %>

<%= resource.description %>

#### Operations

<% for (const operation of resource.operations) { %>
##### <%= operation.description %>

\`\`\`
<%= operation.httpMethod %> <%= operation.route %>
\`\`\`

<% } %>

<% } %>
`
};
/**
 * Creates a directory if it doesn't exist.
 * @param dirPath Path to create
 */
async function ensureDir(dirPath) {
    try {
        await fs.access(dirPath);
        console.log(chalk_1.default.green(`✓ Directory exists: ${dirPath}`));
    }
    catch (error) {
        await fs.mkdir(dirPath, { recursive: true });
        console.log(chalk_1.default.blue(`Created directory: ${dirPath}`));
    }
}
/**
 * Creates a template file with example content if it doesn't exist.
 * @param filePath Path to create
 * @param content Content for the file
 */
async function ensureTemplateFile(filePath, content) {
    try {
        await fs.access(filePath);
        console.log(chalk_1.default.green(`✓ Template exists: ${filePath}`));
    }
    catch (error) {
        await fs.writeFile(filePath, content || '// Template content goes here');
        console.log(chalk_1.default.blue(`Created template: ${filePath}`));
    }
}
/**
 * Recursively creates the required directory structure and template files.
 * @param baseDir Base directory
 * @param structure Structure to create
 */
async function createStructure(baseDir, structure) {
    for (const [key, value] of Object.entries(structure)) {
        const currentPath = path.join(baseDir, key);
        if (Array.isArray(value)) {
            // This is a directory with files
            await ensureDir(currentPath);
            // Create each file
            for (const file of value) {
                const filePath = path.join(currentPath, file);
                // Look up template content if available, otherwise use empty string
                const exampleContent = templateExamples[file] || '';
                await ensureTemplateFile(filePath, exampleContent);
            }
        }
        else {
            // This is a nested directory structure
            await ensureDir(currentPath);
            await createStructure(currentPath, value);
        }
    }
}
/**
 * Main function to set up the template directory structure.
 */
async function setupTemplates() {
    console.log(chalk_1.default.cyan('Setting up template directory structure...'));
    try {
        // Ensure main templates directory exists
        await ensureDir(templatesDir);
        // Copy server.ejs, api.ejs, etc. to the templates root if they exist, or create minimal versions
        for (const [filename, content] of Object.entries(templateExamples)) {
            const filePath = path.join(templatesDir, filename);
            await ensureTemplateFile(filePath, content);
        }
        // Create framework-specific template structures
        for (const [framework, structure] of Object.entries(requiredStructure)) {
            const frameworkDir = path.join(templatesDir, framework);
            await ensureDir(frameworkDir);
            await createStructure(frameworkDir, structure);
        }
        console.log(chalk_1.default.green('\nTemplate directory structure set up successfully!'));
    }
    catch (error) {
        console.error(chalk_1.default.red('\nFailed to set up template directory structure:'));
        console.error(error);
        process.exit(1);
    }
}
// Run the setup function
setupTemplates().catch(console.error);
//# sourceMappingURL=templateSetupScript.js.map