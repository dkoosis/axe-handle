// debug-templates.js
const fs = require('fs');
const path = require('path');
const eta = require('eta');

// Configure Eta
eta.configure({
  useWith: true,
  cache: false,
  autoEscape: false,
  debug: true
});

// Load a template
const templateDir = path.join(__dirname, 'templates');
const typesTemplate = path.join(templateDir, 'express', 'types', 'types.eta');

console.log(`Loading template from: ${typesTemplate}`);
const templateContent = fs.readFileSync(typesTemplate, 'utf-8');

// Sample data
const sampleData = {
  date: new Date().toISOString(),
  version: '0.1.0',
  service: {
    name: 'TestService',
    types: [
      {
        name: 'User',
        fields: [
          { name: 'id', required: true, tsType: 'string' },
          { name: 'name', required: true, tsType: 'string' },
          { name: 'email', required: false, tsType: 'string' }
        ]
      }
    ]
  }
};

// Try rendering
try {
  console.log('Attempting to render template...');
  
  // Method 1: Standard context
  const rendered1 = eta.render(templateContent, sampleData, {
    filename: typesTemplate,
    debug: true
  });
  
  console.log('\nMethod 1 (Standard context) Result:');
  console.log(rendered1 || 'No output');
  
  // Method 2: With data in a nested object
  const rendered2 = eta.render(templateContent, { data: sampleData }, {
    filename: typesTemplate,
    debug: true,
    useWith: true
  });
  
  console.log('\nMethod 2 (Nested data) Result:');
  console.log(rendered2 || 'No output');
  
} catch (error) {
  console.error('Error rendering template:', error);
}

// Print template content for reference
console.log('\nTemplate Content:');
console.log(templateContent);

// Write a modified template to test
const modifiedTemplate = `// Generated by Axe Handle MCP Server Generator
// Date: <%%= data.date %>
// Version: <%%= data.version %>

// Type definitions template for <%%= data.service.name %>
<%% for (const type of data.service.types) { %>
export interface <%%= type.name %> {
<%% for (const field of type.fields) { %>
  <%%= field.name %><%%= field.required ? '' : '?' %>: <%%= field.tsType %>;
<%% } %>
}

<%% } %>`;

const testTemplatePath = path.join(__dirname, 'test-template.eta');
fs.writeFileSync(testTemplatePath, modifiedTemplate);

console.log('\nWritten test template to:', testTemplatePath);
console.log('Try rendering the test template:');

try {
  const rendered = eta.render(modifiedTemplate, { data: sampleData }, {
    useWith: true,
    debug: true
  });
  
  console.log('\nTest Template Result:');
  console.log(rendered || 'No output');
  
  // Save the output for inspection
  const outputPath = path.join(__dirname, 'test-output.ts');
  fs.writeFileSync(outputPath, rendered || 'No output');
  console.log(`Output saved to: ${outputPath}`);
  
} catch (error) {
  console.error('Error rendering test template:', error);
}
