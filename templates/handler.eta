// Generated by Axe Handle MCP Server Generator
// Date: <<<%= it.it.it.it.date %> %> %>
// Version: <<<%= it.it.it.it.version %> %> %>

// DO NOT EDIT THIS FILE MANUALLY
// This file contains the handler implementation for the <<<%= it.it.it.it.resource.name %> %> %> resource

import { Request, Response } from 'express';
import { v4 as uuidv4 } from 'uuid';
import {
  <<<%= it.it.it.it.resource.name %> %> %>,
<<<% for (const operation of resource.operations) { %>
  <<<%= it.it.it.it.operation.inputType %> %> %>,
<% if (operation.name === 'List' || operation.name === 'Delete') { %>
  <<<%= it.it.it.it.operation.outputType %> %> %>,
<<<% } %> %> %>
<<<% } %> %> %>
  McpErrorResponse
} from '../types';

// In-memory store for <<<%= it.it.it.it.resource.name %> %> %> resources (replace with a database in production)
const <<<%= it.it.resource.name.toLowerCase %> %>() %>Store: Record<string, <<<%= it.it.it.it.resource.name %> %> %>> = {};

/**
 * Handler for getting a <<<%= it.it.it.it.resource.name %> %> %> by ID.
 * @param req Express request
 * @param res Express response
 */
export async function get<<<%= it.it.it.it.resource.name %> %> %>(req: Request, res: Response): Promise<void> {
  try {
    const id = req.params.id;
    
    // Validate input
    if (!id) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4000',
        message: 'Missing required parameter: id',
      };
      res.status(400).json(errorResponse);
      return;
    }
    
    // Get <<<%= it.it.it.it.resource.name %> %> %> from store
    const <<<%= it.it.resource.name.toLowerCase %> %>() %> = <<<%= it.it.resource.name.toLowerCase %> %>() %>Store[id];
    if (!<<<%= it.it.resource.name.toLowerCase %> %>() %>) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4004',
        message: '<<<%= it.it.it.it.resource.name %> %> %> not found',
        details: { id }
      };
      res.status(404).json(errorResponse);
      return;
    }
    
    // Return the <<<%= it.it.it.it.resource.name %> %> %>
    res.status(200).json(<<<%= it.it.resource.name.toLowerCase %> %>() %>);
  } catch (error) {
    console.error(`Error getting <<<%= it.it.resource.name.toLowerCase %> %>() %>:`, error);
    const errorResponse: McpErrorResponse = {
      code: 'MCP-5000',
      message: 'Internal server error',
    };
    res.status(500).json(errorResponse);
  }
}

/**
 * Handler for listing <<<%= it.it.resource.name.toLowerCase %> %>() %>s.
 * @param req Express request
 * @param res Express response
 */
export async function list<<<%= it.it.it.it.resource.name %> %> %>s(req: Request, res: Response): Promise<void> {
  try {
    // Get query parameters
    const pageSize = parseInt(req.query.pageSize as string) || 20;
    const pageToken = req.query.pageToken as string;
    const filter = req.query.filter as string;
    
    // Validate pageSize
    if (pageSize <= 0 || pageSize > 100) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4000',
        message: 'Invalid page size (must be between 1 and 100)',
        details: { pageSize }
      };
      res.status(400).json(errorResponse);
      return;
    }
    
    // Get all <<<%= it.it.resource.name.toLowerCase %> %>() %>s
    const all<<<%= it.it.it.it.resource.name %> %> %>s = Object.values(<<<%= it.it.resource.name.toLowerCase %> %>() %>Store);
    
    // Apply filtering (simplified implementation)
    let filtered<<<%= it.it.it.it.resource.name %> %> %>s = all<<<%= it.it.it.it.resource.name %> %> %>s;
    if (filter) {
      // This is a simplified filter implementation
      // In a real application, you would parse the filter string and apply it
      filtered<<<%= it.it.it.it.resource.name %> %> %>s = all<<<%= it.it.it.it.resource.name %> %> %>s.filter(<<<%= it.it.resource.name.toLowerCase %> %>() %> => 
        JSON.stringify(<<<%= it.it.resource.name.toLowerCase %> %>() %>).toLowerCase().includes(filter.toLowerCase())
      );
    }
    
    // Apply pagination
    let startIndex = 0;
    if (pageToken) {
      // In a real implementation, you would decode the page token
      // This is a simplified approach that assumes the page token is the start index
      startIndex = parseInt(pageToken);
      if (isNaN(startIndex)) {
        startIndex = 0;
      }
    }
    
    const endIndex = Math.min(startIndex + pageSize, filtered<<<%= it.it.it.it.resource.name %> %> %>s.length);
    const page<<<%= it.it.it.it.resource.name %> %> %>s = filtered<<<%= it.it.it.it.resource.name %> %> %>s.slice(startIndex, endIndex);
    
    // Generate next page token
    let nextPageToken: string | undefined;
    if (endIndex < filtered<<<%= it.it.it.it.resource.name %> %> %>s.length) {
      nextPageToken = String(endIndex);
    }
    
    // Create response
    const response: List<<<%= it.it.it.it.resource.name %> %> %>Response = {
      <<<%= it.it.resource.name.toLowerCase %> %>() %>s: page<<<%= it.it.it.it.resource.name %> %> %>s,
      nextPageToken,
      totalSize: filtered<<<%= it.it.it.it.resource.name %> %> %>s.length
    };
    
    // Return the response
    res.status(200).json(response);
  } catch (error) {
    console.error(`Error listing <<<%= it.it.resource.name.toLowerCase %> %>() %>s:`, error);
    const errorResponse: McpErrorResponse = {
      code: 'MCP-5000',
      message: 'Internal server error',
    };
    res.status(500).json(errorResponse);
  }
}

/**
 * Handler for creating a <<<%= it.it.it.it.resource.name %> %> %>.
 * @param req Express request
 * @param res Express response
 */
export async function create<<<%= it.it.it.it.resource.name %> %> %>(req: Request, res: Response): Promise<void> {
  try {
    const { <<<%= it.it.resource.name.toLowerCase %> %>() %> } = req.body as Create<<<%= it.it.it.it.resource.name %> %> %>Request;
    
    // Validate input
    if (!<<<%= it.it.resource.name.toLowerCase %> %>() %>) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4000',
        message: 'Missing required <<<%= it.it.resource.name.toLowerCase %> %>() %> data',
      };
      res.status(400).json(errorResponse);
      return;
    }
    
    // Validate required fields
<<<% for (const field of resource.fields.filter(f => f.required && f.name !== 'id')) { %>
    if (!<<<%= it.it.resource.name.toLowerCase %> %>() %>.<<<%= it.it.it.it.field.name %> %> %>) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4000',
        message: 'Missing required field: <<<%= it.it.it.it.field.name %> %> %>',
      };
      res.status(400).json(errorResponse);
      return;
    }
<<<% } %> %> %>
    
    // Generate a unique ID
    const id = uuidv4();
    
    // Create the <<<%= it.it.it.it.resource.name %> %> %>
    const new<<<%= it.it.it.it.resource.name %> %> %>: <<<%= it.it.it.it.resource.name %> %> %> = {
      id,
      ...<<<%= it.it.resource.name.toLowerCase %> %>() %>
    };
    
    // Save to store
    <<<%= it.it.resource.name.toLowerCase %> %>() %>Store[id] = new<<<%= it.it.it.it.resource.name %> %> %>;
    
    // Return the created <<<%= it.it.it.it.resource.name %> %> %>
    res.status(201).json(new<<<%= it.it.it.it.resource.name %> %> %>);
  } catch (error) {
    console.error(`Error creating <<<%= it.it.resource.name.toLowerCase %> %>() %>:`, error);
    const errorResponse: McpErrorResponse = {
      code: 'MCP-5000',
      message: 'Internal server error',
    };
    res.status(500).json(errorResponse);
  }
}

/**
 * Handler for updating a <<<%= it.it.it.it.resource.name %> %> %>.
 * @param req Express request
 * @param res Express response
 */
export async function update<<<%= it.it.it.it.resource.name %> %> %>(req: Request, res: Response): Promise<void> {
  try {
    const id = req.params.id;
    const { <<<%= it.it.resource.name.toLowerCase %> %>() %> } = req.body as Update<<<%= it.it.it.it.resource.name %> %> %>Request;
    
    // Validate input
    if (!id) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4000',
        message: 'Missing required parameter: id',
      };
      res.status(400).json(errorResponse);
      return;
    }
    
    if (!<<<%= it.it.resource.name.toLowerCase %> %>() %>) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4000',
        message: 'Missing required <<<%= it.it.resource.name.toLowerCase %> %>() %> data',
      };
      res.status(400).json(errorResponse);
      return;
    }
    
    // Get existing <<<%= it.it.it.it.resource.name %> %> %>
    const existing<<<%= it.it.it.it.resource.name %> %> %> = <<<%= it.it.resource.name.toLowerCase %> %>() %>Store[id];
    if (!existing<<<%= it.it.it.it.resource.name %> %> %>) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4004',
        message: '<<<%= it.it.it.it.resource.name %> %> %> not found',
        details: { id }
      };
      res.status(404).json(errorResponse);
      return;
    }
    
    // Update the <<<%= it.it.it.it.resource.name %> %> %>
    const updated<<<%= it.it.it.it.resource.name %> %> %>: <<<%= it.it.it.it.resource.name %> %> %> = {
      ...existing<<<%= it.it.it.it.resource.name %> %> %>,
      ...<<<%= it.it.resource.name.toLowerCase %> %>() %>,
      id // Ensure ID doesn't change
    };
    
    // Save to store
    <<<%= it.it.resource.name.toLowerCase %> %>() %>Store[id] = updated<<<%= it.it.it.it.resource.name %> %> %>;
    
    // Return the updated <<<%= it.it.it.it.resource.name %> %> %>
    res.status(200).json(updated<<<%= it.it.it.it.resource.name %> %> %>);
  } catch (error) {
    console.error(`Error updating <<<%= it.it.resource.name.toLowerCase %> %>() %>:`, error);
    const errorResponse: McpErrorResponse = {
      code: 'MCP-5000',
      message: 'Internal server error',
    };
    res.status(500).json(errorResponse);
  }
}

/**
 * Handler for deleting a <<<%= it.it.it.it.resource.name %> %> %>.
 * @param req Express request
 * @param res Express response
 */
export async function delete<<<%= it.it.it.it.resource.name %> %> %>(req: Request, res: Response): Promise<void> {
  try {
    const id = req.params.id;
    
    // Validate input
    if (!id) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4000',
        message: 'Missing required parameter: id',
      };
      res.status(400).json(errorResponse);
      return;
    }
    
    // Check if <<<%= it.it.it.it.resource.name %> %> %> exists
    if (!<<<%= it.it.resource.name.toLowerCase %> %>() %>Store[id]) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4004',
        message: '<<<%= it.it.it.it.resource.name %> %> %> not found',
        details: { id }
      };
      res.status(404).json(errorResponse);
      return;
    }
    
    // Delete the <<<%= it.it.it.it.resource.name %> %> %>
    delete <<<%= it.it.resource.name.toLowerCase %> %>() %>Store[id];
    
    // Return success response
    const response: Delete<<<%= it.it.it.it.resource.name %> %> %>Response = {
      id,
      success: true
    };
    res.status(200).json(response);
  } catch (error) {
    console.error(`Error deleting <<<%= it.it.resource.name.toLowerCase %> %>() %>:`, error);
    const errorResponse: McpErrorResponse = {
      code: 'MCP-5000',
      message: 'Internal server error',
    };
    res.status(500).json(errorResponse);
  }
}