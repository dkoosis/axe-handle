// Generated by Axe Handle MCP Server Generator
// Date: <%= date %>
// Version: <%= version %>

// DO NOT EDIT THIS FILE MANUALLY
// This file contains the handler implementation for the <%= resource.name %> resource

import { Request, Response } from 'express';
import { v4 as uuidv4 } from 'uuid';
import {
  <%= resource.name %>,
<% for (const operation of resource.operations) { %>
  <%= operation.inputType %>,
<% if (operation.name === 'List' || operation.name === 'Delete') { %>
  <%= operation.outputType %>,
<% } %>
<% } %>
  McpErrorResponse
} from '../types';

// In-memory store for <%= resource.name %> resources (replace with a database in production)
const <%= resource.name.toLowerCase() %>Store: Record<string, <%= resource.name %>> = {};

/**
 * Handler for getting a <%= resource.name %> by ID.
 * @param req Express request
 * @param res Express response
 */
export async function get<%= resource.name %>(req: Request, res: Response): Promise<void> {
  try {
    const id = req.params.id;
    
    // Validate input
    if (!id) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4000',
        message: 'Missing required parameter: id',
      };
      res.status(400).json(errorResponse);
      return;
    }
    
    // Get <%= resource.name %> from store
    const <%= resource.name.toLowerCase() %> = <%= resource.name.toLowerCase() %>Store[id];
    if (!<%= resource.name.toLowerCase() %>) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4004',
        message: '<%= resource.name %> not found',
        details: { id }
      };
      res.status(404).json(errorResponse);
      return;
    }
    
    // Return the <%= resource.name %>
    res.status(200).json(<%= resource.name.toLowerCase() %>);
  } catch (error) {
    console.error(`Error getting <%= resource.name.toLowerCase() %>:`, error);
    const errorResponse: McpErrorResponse = {
      code: 'MCP-5000',
      message: 'Internal server error',
    };
    res.status(500).json(errorResponse);
  }
}

/**
 * Handler for listing <%= resource.name.toLowerCase() %>s.
 * @param req Express request
 * @param res Express response
 */
export async function list<%= resource.name %>s(req: Request, res: Response): Promise<void> {
  try {
    // Get query parameters
    const pageSize = parseInt(req.query.pageSize as string) || 20;
    const pageToken = req.query.pageToken as string;
    const filter = req.query.filter as string;
    
    // Validate pageSize
    if (pageSize <= 0 || pageSize > 100) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4000',
        message: 'Invalid page size (must be between 1 and 100)',
        details: { pageSize }
      };
      res.status(400).json(errorResponse);
      return;
    }
    
    // Get all <%= resource.name.toLowerCase() %>s
    const all<%= resource.name %>s = Object.values(<%= resource.name.toLowerCase() %>Store);
    
    // Apply filtering (simplified implementation)
    let filtered<%= resource.name %>s = all<%= resource.name %>s;
    if (filter) {
      // This is a simplified filter implementation
      // In a real application, you would parse the filter string and apply it
      filtered<%= resource.name %>s = all<%= resource.name %>s.filter(<%= resource.name.toLowerCase() %> => 
        JSON.stringify(<%= resource.name.toLowerCase() %>).toLowerCase().includes(filter.toLowerCase())
      );
    }
    
    // Apply pagination
    let startIndex = 0;
    if (pageToken) {
      // In a real implementation, you would decode the page token
      // This is a simplified approach that assumes the page token is the start index
      startIndex = parseInt(pageToken);
      if (isNaN(startIndex)) {
        startIndex = 0;
      }
    }
    
    const endIndex = Math.min(startIndex + pageSize, filtered<%= resource.name %>s.length);
    const page<%= resource.name %>s = filtered<%= resource.name %>s.slice(startIndex, endIndex);
    
    // Generate next page token
    let nextPageToken: string | undefined;
    if (endIndex < filtered<%= resource.name %>s.length) {
      nextPageToken = String(endIndex);
    }
    
    // Create response
    const response: List<%= resource.name %>Response = {
      <%= resource.name.toLowerCase() %>s: page<%= resource.name %>s,
      nextPageToken,
      totalSize: filtered<%= resource.name %>s.length
    };
    
    // Return the response
    res.status(200).json(response);
  } catch (error) {
    console.error(`Error listing <%= resource.name.toLowerCase() %>s:`, error);
    const errorResponse: McpErrorResponse = {
      code: 'MCP-5000',
      message: 'Internal server error',
    };
    res.status(500).json(errorResponse);
  }
}

/**
 * Handler for creating a <%= resource.name %>.
 * @param req Express request
 * @param res Express response
 */
export async function create<%= resource.name %>(req: Request, res: Response): Promise<void> {
  try {
    const { <%= resource.name.toLowerCase() %> } = req.body as Create<%= resource.name %>Request;
    
    // Validate input
    if (!<%= resource.name.toLowerCase() %>) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4000',
        message: 'Missing required <%= resource.name.toLowerCase() %> data',
      };
      res.status(400).json(errorResponse);
      return;
    }
    
    // Validate required fields
<% for (const field of resource.fields.filter(f => f.required && f.name !== 'id')) { %>
    if (!<%= resource.name.toLowerCase() %>.<%= field.name %>) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4000',
        message: 'Missing required field: <%= field.name %>',
      };
      res.status(400).json(errorResponse);
      return;
    }
<% } %>
    
    // Generate a unique ID
    const id = uuidv4();
    
    // Create the <%= resource.name %>
    const new<%= resource.name %>: <%= resource.name %> = {
      id,
      ...<%= resource.name.toLowerCase() %>
    };
    
    // Save to store
    <%= resource.name.toLowerCase() %>Store[id] = new<%= resource.name %>;
    
    // Return the created <%= resource.name %>
    res.status(201).json(new<%= resource.name %>);
  } catch (error) {
    console.error(`Error creating <%= resource.name.toLowerCase() %>:`, error);
    const errorResponse: McpErrorResponse = {
      code: 'MCP-5000',
      message: 'Internal server error',
    };
    res.status(500).json(errorResponse);
  }
}

/**
 * Handler for updating a <%= resource.name %>.
 * @param req Express request
 * @param res Express response
 */
export async function update<%= resource.name %>(req: Request, res: Response): Promise<void> {
  try {
    const id = req.params.id;
    const { <%= resource.name.toLowerCase() %> } = req.body as Update<%= resource.name %>Request;
    
    // Validate input
    if (!id) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4000',
        message: 'Missing required parameter: id',
      };
      res.status(400).json(errorResponse);
      return;
    }
    
    if (!<%= resource.name.toLowerCase() %>) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4000',
        message: 'Missing required <%= resource.name.toLowerCase() %> data',
      };
      res.status(400).json(errorResponse);
      return;
    }
    
    // Get existing <%= resource.name %>
    const existing<%= resource.name %> = <%= resource.name.toLowerCase() %>Store[id];
    if (!existing<%= resource.name %>) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4004',
        message: '<%= resource.name %> not found',
        details: { id }
      };
      res.status(404).json(errorResponse);
      return;
    }
    
    // Update the <%= resource.name %>
    const updated<%= resource.name %>: <%= resource.name %> = {
      ...existing<%= resource.name %>,
      ...<%= resource.name.toLowerCase() %>,
      id // Ensure ID doesn't change
    };
    
    // Save to store
    <%= resource.name.toLowerCase() %>Store[id] = updated<%= resource.name %>;
    
    // Return the updated <%= resource.name %>
    res.status(200).json(updated<%= resource.name %>);
  } catch (error) {
    console.error(`Error updating <%= resource.name.toLowerCase() %>:`, error);
    const errorResponse: McpErrorResponse = {
      code: 'MCP-5000',
      message: 'Internal server error',
    };
    res.status(500).json(errorResponse);
  }
}

/**
 * Handler for deleting a <%= resource.name %>.
 * @param req Express request
 * @param res Express response
 */
export async function delete<%= resource.name %>(req: Request, res: Response): Promise<void> {
  try {
    const id = req.params.id;
    
    // Validate input
    if (!id) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4000',
        message: 'Missing required parameter: id',
      };
      res.status(400).json(errorResponse);
      return;
    }
    
    // Check if <%= resource.name %> exists
    if (!<%= resource.name.toLowerCase() %>Store[id]) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4004',
        message: '<%= resource.name %> not found',
        details: { id }
      };
      res.status(404).json(errorResponse);
      return;
    }
    
    // Delete the <%= resource.name %>
    delete <%= resource.name.toLowerCase() %>Store[id];
    
    // Return success response
    const response: Delete<%= resource.name %>Response = {
      id,
      success: true
    };
    res.status(200).json(response);
  } catch (error) {
    console.error(`Error deleting <%= resource.name.toLowerCase() %>:`, error);
    const errorResponse: McpErrorResponse = {
      code: 'MCP-5000',
      message: 'Internal server error',
    };
    res.status(500).json(errorResponse);
  }
}