// Generated by Axe Handle MCP Server Generator
// Date: <%= date %>
// Version: <%= version %>

import express from 'express';
import { json, urlencoded } from 'express';
import expressWs from 'express-ws';
import http from 'http';
import WebSocket from 'ws';
import { v4 as uuidv4 } from 'uuid';
import { logger } from './utils';

// Create Express application
const app = express();
const server = http.createServer(app);
const wsInstance = expressWs(app, server);

// Middleware
app.use(json());
app.use(urlencoded({ extended: true }));

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'ok' });
});

<% for (const resource of service.resources) { %>
// <%= resource.name %> endpoints
<% for (const operation of resource.operations) { %>
app.<%= operation.httpMethod.toLowerCase() %>('<%= operation.route %>', <%= resource.name.toLowerCase() %>Handler.<%= operation.name.toLowerCase() %><%= resource.name %>);
<% } %>

<% } %>

// WebSocket endpoint for MCP
app.ws('/mcp', (ws, req) => {
  const connectionId = uuidv4();
  logger.info(`New MCP connection established: ${connectionId}`);
  
  // Set up event handlers
  ws.on('message', (message) => {
    // Handle MCP messages
    try {
      const data = JSON.parse(message.toString());
      // TODO: Process the message
    } catch (error) {
      logger.error(`Error processing message: ${error}`);
    }
  });
  
  ws.on('close', () => {
    logger.info(`MCP connection closed: ${connectionId}`);
  });
  
  ws.on('error', (error) => {
    logger.error(`MCP connection error: ${error}`);
  });
});

export default app;