# Axe-Handle Code Quality Guidelines

This document outlines the code quality rules enforced in the Axe-Handle project.

## Directory Structure

The project structure is enforced to maintain organized code. Run `npm run check-structure` to validate directory structure. If legitimate changes need to be saved, run `npm run update-structure`.

## File Headers

All source files must include a path header comment as the first line (after shebang if present):

```typescript
// Path: src/utils/example.ts
```

Run `npm run fix-paths` to automatically add or fix path headers.

## TypeScript Rules

We follow Google TypeScript Style (GTS) with additional rules:

1. **Interface and Type Names**: Must use PascalCase
2. **Boolean Variables**: Should use prefixes (is, has, should, can, will, does)
3. **Function Size**: Keep under 80 lines to maintain readability
4. **Complexity**: Keep cyclomatic complexity under 10
5. **Documentation**: Functions, classes, and interfaces should have JSDoc comments

## Neverthrow Error Handling

We use the `neverthrow` library for functional error handling:

1. **No Direct Throws**: Use `err()` from resultUtils instead of throwing errors
2. **Result Handling**: Always properly handle Result objects
3. **Checked Catches**: Use proper error handling in catch blocks

See `src/utils/resultUtils.ts` for helper functions like:
- `runOperation` and `runAsyncOperation` for wrapping try/catch blocks
- `okResult` and `errResult` for creating Result objects

## Pre-Build Checks

All rules are enforced during build and development:

- `npm run check-all`: Runs all checks
- `npm run check-structure`: Validates directory structure
- `npm run check-paths`: Validates file path headers
- `npm run lint`: Runs ESLint checks including neverthrow rules

## Fixing Issues

- `npm run update-structure`: Updates directory structure snapshot
- `npm run fix-paths`: Fixes file path headers
- `npm run lint:fix`: Fixes ESLint issues where possible
