// src/ensureProjectStructure.ts
// This runs before the TypeScript compilation to ensure templates are set up correctly

import * as fs from 'fs';
import * as path from 'path';

/**
 * Simple colored console output
 */
const colors = {
  cyan: (text: string) => `\x1b[36m${text}\x1b[0m`,
  green: (text: string) => `\x1b[32m${text}\x1b[0m`,
  yellow: (text: string) => `\x1b[33m${text}\x1b[0m`,
  red: (text: string) => `\x1b[31m${text}\x1b[0m`
};

/**
 * Ensures the templates directory structure exists and contains all required templates.
 * Creates missing directories and template files as needed.
 */
async function ensureTemplates(): Promise<void> {
  console.log(colors.cyan('Validating template structure...'));
  
  // Find project root and templates directory
  const projectRoot = path.resolve(__dirname, '..');
  const templatesDir = path.join(projectRoot, 'templates');
  
  // Ensure templates directory exists
  if (!fs.existsSync(templatesDir)) {
    console.log(colors.yellow('Creating templates directory...'));
    fs.mkdirSync(templatesDir, { recursive: true });
  }
  
  // Ensure express directory exists
  const expressDir = path.join(templatesDir, 'express');
  if (!fs.existsSync(expressDir)) {
    console.log(colors.yellow('Creating express templates directory...'));
    fs.mkdirSync(expressDir, { recursive: true });
  }
  
  // Required category directories
  const requiredDirs = ['server', 'handler', 'types', 'index', 'api'];
  
  // Ensure category directories exist
  for (const dir of requiredDirs) {
    const categoryDir = path.join(expressDir, dir);
    if (!fs.existsSync(categoryDir)) {
      console.log(colors.yellow(`Creating ${dir} templates directory...`));
      fs.mkdirSync(categoryDir, { recursive: true });
    }
  }
  
  // Required template files with minimal content
  const requiredTemplates = {
    'server/server.eta': `// Generated by Axe Handle MCP Server Generator
// Date: <%= date %>
// Version: <%= version %>

import express from 'express';
import { json, urlencoded } from 'express';
import { v4 as uuidv4 } from 'uuid';
import { logger } from './utils';

// Create Express application
const app = express();

// Middleware
app.use(json());
app.use(urlencoded({ extended: true }));

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'ok' });
});

<% for (const resource of service.resources) { %>
// <%= resource.name %> endpoints
<% for (const operation of resource.operations) { %>
app.<%= operation.httpMethod.toLowerCase() %>('<%= operation.route %>', <%= resource.name.toLowerCase() %>Handler.<%= operation.name.toLowerCase() %><%= resource.name %>);
<% } %>

<% } %>

export default app;`,

    'handler/handler.eta': `// Generated by Axe Handle MCP Server Generator
// Date: <%= date %>
// Version: <%= version %>

// Handler template for <%= resource.name %> resource
import { Request, Response } from 'express';
import { v4 as uuidv4 } from 'uuid';
import {
  <%= resource.name %>,
<% for (const operation of resource.operations) { %>
  <%= operation.inputType %>,
<% if (operation.name === 'List' || operation.name === 'Delete') { %>
  <%= operation.outputType %>,
<% } %>
<% } %>
  McpErrorResponse
} from '../types';

// Store for <%= resource.name %> resources
const <%= resource.name.toLowerCase() %>Store: Record<string, <%= resource.name %>> = {};

// Handler methods for <%= resource.name %> operations
<% for (const operation of resource.operations) { %>
export async function <%= operation.name.toLowerCase() %><%= resource.name %>(req: Request, res: Response): Promise<void> {
  // Basic implementation
  try {
    // Implementation details will go here
    res.status(200).json({});
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
}

<% } %>`,

    'types/types.eta': `// Generated by Axe Handle MCP Server Generator
// Date: <%= date %>
// Version: <%= version %>

// TypeScript type definitions for the <%= service.name %> service

/**
 * Error response structure
 */
export interface McpErrorResponse {
  code: string;
  message: string;
  details?: Record<string, unknown>;
}

<% for (const type of service.types) { %>
/**
 * <%= type.description %>
 */
export interface <%= type.name %> {
<% for (const field of type.fields) { %>
  <%= field.name %><%= field.required ? '' : '?' %>: <%= field.tsType %>;
<% } %>
}

<% } %>`,

    'index/index.eta': `// Generated by Axe Handle MCP Server Generator
// Date: <%= date %>
// Version: <%= version %>

// Main entry point for the <%= service.name %> MCP service
import app from './server';

const PORT = process.env.PORT || 3000;

// Start the server
app.listen(PORT, () => {
  console.log(\`<%= service.name %> MCP server running on port \${PORT}\`);
});`,

    'api/api.eta': `# <%= service.name %> API Documentation

> Generated by Axe Handle MCP Server Generator - <%= date %>

## Overview

This document describes the API for the <%= service.name %> service.

## Resources

<% for (const resource of service.resources) { %>
### <%= resource.name %>

<%= resource.description %>

#### Operations

<% for (const operation of resource.operations) { %>
##### <%= operation.description %>

\`\`\`
<%= operation.httpMethod %> <%= operation.route %>
\`\`\`

<% } %>

<% } %>
`
  };
  
  // Ensure template files exist
  for (const [templatePath, content] of Object.entries(requiredTemplates)) {
    const fullPath = path.join(expressDir, templatePath);
    if (!fs.existsSync(fullPath)) {
      console.log(colors.yellow(`Creating template file: ${templatePath}`));
      
      // Ensure parent directory exists
      const dir = path.dirname(fullPath);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
      
      // Write template file
      fs.writeFileSync(fullPath, content, 'utf-8');
    }
  }
  
  console.log(colors.green('âœ“ Template validation complete'));
}

// Run the prebuild script
ensureTemplates().catch(error => {
  console.error(colors.red('Template validation failed:'), error);
  process.exit(1);
});
