# Axe-Handle Project: Data Flow

# Define components involved in data flow
User: {
  shape: person
  style.fill: "#f5f5f5"
}

ServiceSchemaFile: {
  label: "Service Schema\n(.proto file)"
  shape: document
  style: {
    fill: "#fff8e1"
    stroke: "#ffa000"
  }
}

CLI: {
  label: "CLI"
  shape: rectangle
  style: {
    fill: "#e1f5fe"
    stroke: "#0288d1"
    border-radius: 4
  }
}

MCPServerGenerator: {
  label: "MCP Server Generator"
  shape: rectangle
  style: {
    fill: "#e8f5e9"
    stroke: "#388e3c"
    border-radius: 4
  }
}

MCPProtocolParser: {
  label: "Model Context Protocol Parser"
  shape: rectangle
  style: {
    fill: "#ffe0b2"
    stroke: "#ef6c00"
    border-radius: 4
  }
}

MCPProtocolDefinition: {
  label: "MCP Protocol Definition\n(static data)"
  shape: cylinder
  style: {
    fill: "#ffecb3"
    stroke: "#ffa000"
  }
}

ParsedServiceRepresentation: {
  label: "Parsed Service Representation\n(internal data structure)"
  shape: hexagon
  style: {
    fill: "#e0f2f1"
    stroke: "#00897b"
  }
}

TemplateProcessor: {
  label: "Template Processor\n(Eta)"
  shape: rectangle
  style: {
    fill: "#f3e5f5"
    stroke: "#7b1fa2"
    border-radius: 4
  }
}

TemplateFiles: {
  label: "Templates\n(.eta files)"
  shape: document
  style: {
    fill: "#f1f8e9"
    stroke: "#7cb342"
  }
}

GeneratedServerCode: {
  label: "Generated Server Code\n(output files)"
  shape: document
  style: {
    fill: "#e8eaf6"
    stroke: "#3949ab"
  }
}

OutputDirectory: {
  label: "Output Directory"
  shape: folder
  style: {
    fill: "#e3f2fd"
    stroke: "#1976d2"
  }
}

# Define data flow
User -> ServiceSchemaFile: "1. Provides" {
  style.stroke: "#f57f17"
  style.stroke-width: 2
}

User -> CLI: "2. Runs with schema path" {
  style.stroke: "#f57f17"
  style.stroke-width: 2
}

CLI -> MCPServerGenerator: "3. Invokes with schema path" {
  style.stroke: "#f57f17"
  style.stroke-width: 2
}

ServiceSchemaFile -> MCPServerGenerator: "Input" {
  style.stroke: "#f57f17"
  style.stroke-width: 2
}

MCPServerGenerator -> MCPProtocolParser: "4. Uses to parse schema" {
  style.stroke: "#f57f17"
  style.stroke-width: 2
}

MCPProtocolParser -> MCPProtocolDefinition: "5. References" {
  style.stroke: "#f57f17"
  style.stroke-width: 2
}

MCPProtocolParser -> ParsedServiceRepresentation: "6. Produces" {
  style.stroke: "#f57f17"
  style.stroke-width: 2
}

MCPServerGenerator -> TemplateProcessor: "7. Uses with parsed data" {
  style.stroke: "#f57f17"
  style.stroke-width: 2
}

TemplateProcessor -> TemplateFiles: "8. Loads and renders" {
  style.stroke: "#f57f17"
  style.stroke-width: 2
}

ParsedServiceRepresentation -> TemplateProcessor: "Input data" {
  style.stroke: "#f57f17"
  style.stroke-width: 2
  style.stroke-dash: 5
}

TemplateProcessor -> MCPServerGenerator: "Rendered code" {
  style.stroke: "#f57f17"
  style.stroke-width: 2
}

MCPServerGenerator -> GeneratedServerCode: "9. Produces" {
  style.stroke: "#f57f17"
  style.stroke-width: 2
}

GeneratedServerCode -> OutputDirectory: "10. Written to" {
  style.stroke: "#f57f17"
  style.stroke-width: 2
}

# Add callout notes to clarify components
ProtoBufNote: {
  label: "Uses Protocol Buffers library"
  style.font-size: 12
  style.italic: true
}

ProtoBufNote -> MCPProtocolParser: {
  style.stroke-dash: 3
}

EtaNote: {
  label: "Powered by Eta template engine"
  style.font-size: 12
  style.italic: true
}

EtaNote -> TemplateProcessor: {
  style.stroke-dash: 3
}

# Legend
DataFlowLegend: {
  label: "Data Flow"
  shape: text
}

FlowArrow: {
  label: ""
  shape: sequence_diagram
}

DataFlowLegend -> FlowArrow: {
  style.stroke: "#f57f17"
  style.stroke-width: 2
}

# Group related elements
parsing: {
  MCPProtocolParser
  MCPProtocolDefinition
  ParsedServiceRepresentation
  
  style.stroke: "#ff9800"
  style.stroke-width: 1
  style.stroke-dash: 5
  style.fill: "transparent"
}

templating: {
  TemplateProcessor
  TemplateFiles
  
  style.stroke: "#9c27b0"
  style.stroke-width: 1
  style.stroke-dash: 5
  style.fill: "transparent"
}