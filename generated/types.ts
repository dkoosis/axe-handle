// Generated by Axe Handle MCP Server Generator
// Date: 2025-03-04T05:21:56.643Z// Version: 0.1.0
// DO NOT EDIT THIS FILE MANUALLY
// This file contains TypeScript type definitions for the Calendar service

/**
 * Error response structure for MCP errors.
 */
export interface McpErrorResponse {
  /** Error code */
  code: string;
  /** Human-readable error message */
  message: string;
  /** Additional details about the error */
  details?: Record<string, unknown>;
}

/**
 * Event resource */
export interface Event {
  /**
   * id field   */
  id?: string;
  /**
   * title field   */
  title?: string;
  /**
   * description field   */
  description?: string;
  /**
   * startTime field   */
  startTime?: google.protobuf.Timestamp;
  /**
   * endTime field   */
  endTime?: google.protobuf.Timestamp;
  /**
   * location field   */
  location?: string;
  /**
   * organizer field   */
  organizer?: string;
  /**
   * attendees field   */
  attendees?: string[];
  /**
   * status field   */
  status?: string;
}

/**
 * Calendar resource */
export interface Calendar {
  /**
   * id field   */
  id?: string;
  /**
   * name field   */
  name?: string;
  /**
   * description field   */
  description?: string;
  /**
   * owner field   */
  owner?: string;
  /**
   * isPrimary field   */
  isPrimary?: boolean;
  /**
   * timeZone field   */
  timeZone?: string;
}

/**
 * Reminder resource */
export interface Reminder {
  /**
   * id field   */
  id?: string;
  /**
   * eventId field   */
  eventId?: string;
  /**
   * minutesBefore field   */
  minutesBefore?: number;
  /**
   * method field   */
  method?: string;
}


// Request and Response Types
      /**
 * Request parameters for getting a Event by ID.
 */
export interface GetEventRequest {
  /** ID of the Event to retrieve */
  id: string;
}

          /**
 * Request parameters for listing events.
 */
export interface ListEventRequest {
  /** Maximum number of items to return (default: 20, max: 100) */
  pageSize?: number;
  /** Page token for pagination */
  pageToken?: string;
  /** Optional filter criteria */
  filter?: string;
}

/**
 * Response for listing events.
 */
export interface ListEventResponse {
  /** List of events */
  events: Event[];
  /** Token for retrieving the next page (if available) */
  nextPageToken?: string;
  /** Total count of events matching the request */
  totalSize?: number;
}

          /**
 * Request parameters for creating a Event.
 */
export interface CreateEventRequest {
  /** Event to create */
  event: Omit<Event, 'id'>;
}

          /**
 * Request parameters for updating a Event.
 */
export interface UpdateEventRequest {
  /** ID of the Event to update */
  id: string;
  /** Updated Event data */
  event: Partial<Event>;
}

          /**
 * Request parameters for deleting a Event.
 */
export interface DeleteEventRequest {
  /** ID of the Event to delete */
  id: string;
}

/**
 * Response for deleting a Event.
 */
export interface DeleteEventResponse {
  /** ID of the deleted Event */
  id: string;
  /** Whether the Event was successfully deleted */
  success: boolean;
}
      
      /**
 * Request parameters for getting a Calendar by ID.
 */
export interface GetCalendarRequest {
  /** ID of the Calendar to retrieve */
  id: string;
}

          /**
 * Request parameters for listing calendars.
 */
export interface ListCalendarRequest {
  /** Maximum number of items to return (default: 20, max: 100) */
  pageSize?: number;
  /** Page token for pagination */
  pageToken?: string;
  /** Optional filter criteria */
  filter?: string;
}

/**
 * Response for listing calendars.
 */
export interface ListCalendarResponse {
  /** List of calendars */
  calendars: Calendar[];
  /** Token for retrieving the next page (if available) */
  nextPageToken?: string;
  /** Total count of calendars matching the request */
  totalSize?: number;
}

          /**
 * Request parameters for creating a Calendar.
 */
export interface CreateCalendarRequest {
  /** Calendar to create */
  calendar: Omit<Calendar, 'id'>;
}

          /**
 * Request parameters for updating a Calendar.
 */
export interface UpdateCalendarRequest {
  /** ID of the Calendar to update */
  id: string;
  /** Updated Calendar data */
  calendar: Partial<Calendar>;
}

          /**
 * Request parameters for deleting a Calendar.
 */
export interface DeleteCalendarRequest {
  /** ID of the Calendar to delete */
  id: string;
}

/**
 * Response for deleting a Calendar.
 */
export interface DeleteCalendarResponse {
  /** ID of the deleted Calendar */
  id: string;
  /** Whether the Calendar was successfully deleted */
  success: boolean;
}
      
      /**
 * Request parameters for getting a Reminder by ID.
 */
export interface GetReminderRequest {
  /** ID of the Reminder to retrieve */
  id: string;
}

          /**
 * Request parameters for listing reminders.
 */
export interface ListReminderRequest {
  /** Maximum number of items to return (default: 20, max: 100) */
  pageSize?: number;
  /** Page token for pagination */
  pageToken?: string;
  /** Optional filter criteria */
  filter?: string;
}

/**
 * Response for listing reminders.
 */
export interface ListReminderResponse {
  /** List of reminders */
  reminders: Reminder[];
  /** Token for retrieving the next page (if available) */
  nextPageToken?: string;
  /** Total count of reminders matching the request */
  totalSize?: number;
}

          /**
 * Request parameters for creating a Reminder.
 */
export interface CreateReminderRequest {
  /** Reminder to create */
  reminder: Omit<Reminder, 'id'>;
}

          /**
 * Request parameters for updating a Reminder.
 */
export interface UpdateReminderRequest {
  /** ID of the Reminder to update */
  id: string;
  /** Updated Reminder data */
  reminder: Partial<Reminder>;
}

          /**
 * Request parameters for deleting a Reminder.
 */
export interface DeleteReminderRequest {
  /** ID of the Reminder to delete */
  id: string;
}

/**
 * Response for deleting a Reminder.
 */
export interface DeleteReminderResponse {
  /** ID of the deleted Reminder */
  id: string;
  /** Whether the Reminder was successfully deleted */
  success: boolean;
}
      
