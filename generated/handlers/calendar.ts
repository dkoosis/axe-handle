// Generated by Axe Handle MCP Server Generator
// Date: 2025-03-03T01:16:11.815Z
// Version: 0.1.0

// DO NOT EDIT THIS FILE MANUALLY
// This file contains the handler implementation for the Calendar resource

import { Request, Response } from 'express';
import { v4 as uuidv4 } from 'uuid';
import {
  Calendar,

  GetCalendarRequest,


  ListCalendarRequest,

  ListCalendarResponse,


  CreateCalendarRequest,


  UpdateCalendarRequest,


  DeleteCalendarRequest,

  DeleteCalendarResponse,


  McpErrorResponse
} from '../types';

// In-memory store for Calendar resources (replace with a database in production)
const calendarStore: Record<string, Calendar> = {};

/**
 * Handler for getting a Calendar by ID.
 * @param req Express request
 * @param res Express response
 */
export async function getCalendar(req: Request, res: Response): Promise<void> {
  try {
    const id = req.params.id;
    
    // Validate input
    if (!id) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4000',
        message: 'Missing required parameter: id',
      };
      res.status(400).json(errorResponse);
      return;
    }
    
    // Get Calendar from store
    const calendar = calendarStore[id];
    if (!calendar) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4004',
        message: 'Calendar not found',
        details: { id }
      };
      res.status(404).json(errorResponse);
      return;
    }
    
    // Return the Calendar
    res.status(200).json(calendar);
  } catch (error) {
    console.error(`Error getting calendar:`, error);
    const errorResponse: McpErrorResponse = {
      code: 'MCP-5000',
      message: 'Internal server error',
    };
    res.status(500).json(errorResponse);
  }
}

/**
 * Handler for listing calendars.
 * @param req Express request
 * @param res Express response
 */
export async function listCalendars(req: Request, res: Response): Promise<void> {
  try {
    // Get query parameters
    const pageSize = parseInt(req.query.pageSize as string) || 20;
    const pageToken = req.query.pageToken as string;
    const filter = req.query.filter as string;
    
    // Validate pageSize
    if (pageSize <= 0 || pageSize > 100) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4000',
        message: 'Invalid page size (must be between 1 and 100)',
        details: { pageSize }
      };
      res.status(400).json(errorResponse);
      return;
    }
    
    // Get all calendars
    const allCalendars = Object.values(calendarStore);
    
    // Apply filtering (simplified implementation)
    let filteredCalendars = allCalendars;
    if (filter) {
      // This is a simplified filter implementation
      // In a real application, you would parse the filter string and apply it
      filteredCalendars = allCalendars.filter(calendar => 
        JSON.stringify(calendar).toLowerCase().includes(filter.toLowerCase())
      );
    }
    
    // Apply pagination
    let startIndex = 0;
    if (pageToken) {
      // In a real implementation, you would decode the page token
      // This is a simplified approach that assumes the page token is the start index
      startIndex = parseInt(pageToken);
      if (isNaN(startIndex)) {
        startIndex = 0;
      }
    }
    
    const endIndex = Math.min(startIndex + pageSize, filteredCalendars.length);
    const pageCalendars = filteredCalendars.slice(startIndex, endIndex);
    
    // Generate next page token
    let nextPageToken: string | undefined;
    if (endIndex < filteredCalendars.length) {
      nextPageToken = String(endIndex);
    }
    
    // Create response
    const response: ListCalendarResponse = {
      calendars: pageCalendars,
      nextPageToken,
      totalSize: filteredCalendars.length
    };
    
    // Return the response
    res.status(200).json(response);
  } catch (error) {
    console.error(`Error listing calendars:`, error);
    const errorResponse: McpErrorResponse = {
      code: 'MCP-5000',
      message: 'Internal server error',
    };
    res.status(500).json(errorResponse);
  }
}

/**
 * Handler for creating a Calendar.
 * @param req Express request
 * @param res Express response
 */
export async function createCalendar(req: Request, res: Response): Promise<void> {
  try {
    const { calendar } = req.body as CreateCalendarRequest;
    
    // Validate input
    if (!calendar) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4000',
        message: 'Missing required calendar data',
      };
      res.status(400).json(errorResponse);
      return;
    }
    
    // Validate required fields

    
    // Generate a unique ID
    const id = uuidv4();
    
    // Create the Calendar
    const newCalendar: Calendar = {
      id,
      ...calendar
    };
    
    // Save to store
    calendarStore[id] = newCalendar;
    
    // Return the created Calendar
    res.status(201).json(newCalendar);
  } catch (error) {
    console.error(`Error creating calendar:`, error);
    const errorResponse: McpErrorResponse = {
      code: 'MCP-5000',
      message: 'Internal server error',
    };
    res.status(500).json(errorResponse);
  }
}

/**
 * Handler for updating a Calendar.
 * @param req Express request
 * @param res Express response
 */
export async function updateCalendar(req: Request, res: Response): Promise<void> {
  try {
    const id = req.params.id;
    const { calendar } = req.body as UpdateCalendarRequest;
    
    // Validate input
    if (!id) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4000',
        message: 'Missing required parameter: id',
      };
      res.status(400).json(errorResponse);
      return;
    }
    
    if (!calendar) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4000',
        message: 'Missing required calendar data',
      };
      res.status(400).json(errorResponse);
      return;
    }
    
    // Get existing Calendar
    const existingCalendar = calendarStore[id];
    if (!existingCalendar) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4004',
        message: 'Calendar not found',
        details: { id }
      };
      res.status(404).json(errorResponse);
      return;
    }
    
    // Update the Calendar
    const updatedCalendar: Calendar = {
      ...existingCalendar,
      ...calendar,
      id // Ensure ID doesn't change
    };
    
    // Save to store
    calendarStore[id] = updatedCalendar;
    
    // Return the updated Calendar
    res.status(200).json(updatedCalendar);
  } catch (error) {
    console.error(`Error updating calendar:`, error);
    const errorResponse: McpErrorResponse = {
      code: 'MCP-5000',
      message: 'Internal server error',
    };
    res.status(500).json(errorResponse);
  }
}

/**
 * Handler for deleting a Calendar.
 * @param req Express request
 * @param res Express response
 */
export async function deleteCalendar(req: Request, res: Response): Promise<void> {
  try {
    const id = req.params.id;
    
    // Validate input
    if (!id) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4000',
        message: 'Missing required parameter: id',
      };
      res.status(400).json(errorResponse);
      return;
    }
    
    // Check if Calendar exists
    if (!calendarStore[id]) {
      const errorResponse: McpErrorResponse = {
        code: 'MCP-4004',
        message: 'Calendar not found',
        details: { id }
      };
      res.status(404).json(errorResponse);
      return;
    }
    
    // Delete the Calendar
    delete calendarStore[id];
    
    // Return success response
    const response: DeleteCalendarResponse = {
      id,
      success: true
    };
    res.status(200).json(response);
  } catch (error) {
    console.error(`Error deleting calendar:`, error);
    const errorResponse: McpErrorResponse = {
      code: 'MCP-5000',
      message: 'Internal server error',
    };
    res.status(500).json(errorResponse);
  }
}